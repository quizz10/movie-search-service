type Query {
    findByTitle(title: String): [Movie]
    findByOriginalTitleAndUserId(userId: Int, originalTitle: String): [Movie]
    findRecommendedTitlesByGenresAndUserId(userId: Int): [Movie]
    findByOriginalTitleStartsWith(originalTitle: String): [AtlasMovie]
    findByTconst(tconst: String): AtlasMovie
    findByText(text: String): [AtlasMovie]
}

type Mutation {
    newUser: User
}


type AtlasMovie {
    _id: ID!
    originalTitle: String
    startYear: String
    tconst: String
    genres: [String]
    averageRating: Float
}

type Movie {
    _id: ID!
    primaryTitle: String
    tconst: String
    startYear: String
    endYear: String
    genres: [String]
    originalTitle: String
    averageRating: Float
    casts: [Cast]
    names: [Name]
}

type Cast {
    _id: ID!
    tconst: String
    ordering: Int
    nconst: String
    category: String
    job: String
    characters: String
}

type Name {
    _id: ID!
    primaryName: String
    primaryProfession:[String]
}

type User {
    id: ID!
    userId: Int
    genres: String!
    searchWords: String!
}